plugins {
	id "org.springframework.boot" version "3.0.7"
	id "io.spring.dependency-management" version "1.1.0"
	id 'java'
	id 'jacoco'
}

group = 'de.unimarburg.diz'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = "17"
targetCompatibility = "17"

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
}

sourceSets {
	intTest {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
	intTestImplementation.extendsFrom implementation
	intTestRuntimeOnly.extendsFrom runtimeOnly
}

task integrationTest(type: Test) {
	description = 'Runs integration tests.'
	group = 'verification'

	testClassesDirs = sourceSets.intTest.output.classesDirs
	classpath = sourceSets.intTest.runtimeClasspath
	shouldRunAfter test
}

check.dependsOn integrationTest

ext {
	set('springCloudVersion', "2021.0.7")
	set('testContainersVersion', '1.18.3')
	set('hapiFhirVersion',"6.6.2")
}

dependencies {
	// spring cloud stream kafka
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
	implementation ('org.springframework.cloud:spring-cloud-stream'){
		// CVE-2022-1471
		exclude group: 'org.yaml', module: 'snakeyaml'
	}
	// added by for CVE-2022-1471
	implementation 'org.yaml:snakeyaml:2.0'


	// spring boot
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-actuator"

	// metrics
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'io.micrometer:micrometer-core'

	// mapper
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'


	implementation "ca.uhn.hapi.fhir:hapi-fhir-base:$hapiFhirVersion"
	implementation "ca.uhn.hapi.fhir:hapi-fhir-structures-r4:$hapiFhirVersion"

	// unit tests
	testImplementation 'org.springframework.cloud:spring-cloud-stream'
	testImplementation 'org.apache.kafka:kafka-streams-test-utils:3.4.0'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.assertj:assertj-core:3.22.0'

	// integration tests
	intTestImplementation 'org.springframework.kafka:spring-kafka-test'
	intTestImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	intTestImplementation "org.testcontainers:kafka:$testContainersVersion"
	intTestImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
	intTestImplementation 'org.awaitility:awaitility:4.2.0'
	intTestImplementation 'org.assertj:assertj-core:3.17.2'

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

integrationTest {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = layout.buildDirectory.dir('jacoco-reports')
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		csv.outputLocation = layout.buildDirectory.file('jacoco/coverage.csv')
		html.outputLocation = layout.buildDirectory.dir('jacoco/html')
	}
}

jar {
	enabled = false
}

bootJar {
	mainClass.set('de.unimarburg.diz.mtbtokafka.Application')
}
